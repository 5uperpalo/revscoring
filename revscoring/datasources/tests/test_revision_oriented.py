from ..datasource import Datasource
from ..revision_oriented import revision


def test_revision():
    assert isinstance(revision.id, Datasource)
    assert hasattr(revision, "parent")
    assert hasattr(revision, "user")
    assert hasattr(revision, "page")
    assert isinstance(revision.timestamp, Datasource)
    assert isinstance(revision.comment, Datasource)
    assert isinstance(revision.byte_len, Datasource)
    assert isinstance(revision.minor, Datasource)
    assert isinstance(revision.content_model, Datasource)
    assert isinstance(revision.content_format, Datasource)
    assert isinstance(revision.text, Datasource)
    assert isinstance(revision.bytes, Datasource)

    # revision.parent
    assert isinstance(revision.parent.id, Datasource)
    assert hasattr(revision.parent, "user")
    assert isinstance(revision.parent.user.id, Datasource)
    assert isinstance(revision.parent.user.name, Datasource)
    assert not hasattr(revision.parent.user, "groups")
    assert isinstance(revision.parent.timestamp, Datasource)
    assert isinstance(revision.parent.comment, Datasource)
    assert isinstance(revision.parent.byte_len, Datasource)
    assert isinstance(revision.parent.minor, Datasource)
    assert isinstance(revision.parent.content_model, Datasource)
    assert isinstance(revision.parent.content_format, Datasource)
    assert isinstance(revision.parent.text, Datasource)
    assert isinstance(revision.parent.bytes, Datasource)
    assert not hasattr(revision.parent, "page")
    assert not hasattr(revision.parent, "parent")

    # revision.page
    assert isinstance(revision.page.id, Datasource)
    assert isinstance(revision.page.namespace, Datasource)
    assert isinstance(revision.page.title, Datasource)
    assert hasattr(revision.page, "creation")
    assert isinstance(revision.page.creation.id, Datasource)
    assert hasattr(revision.page.creation, "user")
    assert isinstance(revision.page.creation.user.id, Datasource)
    assert isinstance(revision.page.creation.user.name, Datasource)
    assert not hasattr(revision.page.creation, "groups")
    assert isinstance(revision.page.creation.timestamp, Datasource)
    assert isinstance(revision.page.creation.comment, Datasource)
    assert isinstance(revision.page.creation.byte_len, Datasource)
    assert isinstance(revision.page.creation.minor, Datasource)
    assert isinstance(revision.page.creation.content_model, Datasource)
    assert isinstance(revision.page.creation.content_format, Datasource)
    assert not hasattr(revision.page.creation, "page")
    assert not hasattr(revision.page.creation, "text")
    assert not hasattr(revision.page.creation, "bytes")

    # revision.user
    assert isinstance(revision.user.id, Datasource)
    assert isinstance(revision.user.name, Datasource)
    assert isinstance(revision.user.editcount, Datasource)
    assert isinstance(revision.user.registration, Datasource)
    assert isinstance(revision.user.groups, Datasource)
    assert isinstance(revision.user.emailable, Datasource)
    assert isinstance(revision.user.gender, Datasource)
    assert isinstance(revision.user.block_id, Datasource)
    assert isinstance(revision.user.blocked_by, Datasource)
    assert isinstance(revision.user.blocked_by_id, Datasource)
    assert isinstance(revision.user.blocked_timestamp, Datasource)
    assert isinstance(revision.user.block_reason, Datasource)
    assert isinstance(revision.user.block_expiry, Datasource)
    assert hasattr(revision.user, "last_revision")
    assert isinstance(revision.user.last_revision.id, Datasource)
    assert isinstance(revision.user.last_revision.parent_id, Datasource)
    assert hasattr(revision.user.last_revision, "page")
    assert isinstance(revision.user.last_revision.page.id, Datasource)
    assert isinstance(revision.user.last_revision.page.namespace, Datasource)
    assert isinstance(revision.user.last_revision.page.title, Datasource)
    assert not hasattr(revision.user.last_revision.page, "creation")
    assert isinstance(revision.user.last_revision.timestamp, Datasource)
    assert isinstance(revision.user.last_revision.comment, Datasource)
    assert isinstance(revision.user.last_revision.byte_len, Datasource)
    assert isinstance(revision.user.last_revision.minor, Datasource)
    assert isinstance(revision.user.last_revision.content_model, Datasource)
    assert isinstance(revision.user.last_revision.content_format, Datasource)
    assert not hasattr(revision.user.last_revision, "user")
    assert not hasattr(revision.user.last_revision, "parent")
    assert not hasattr(revision.user.last_revision, "text")
    assert not hasattr(revision.user.last_revision, "bytes")
