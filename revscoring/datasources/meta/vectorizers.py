"""
These meta-datasources operate on :class:`revscoring.Datasource`'s that
return `list`'s of items and produce vectors out of the same.

.. autoclass:: revscoring.datasources.meta.vectors
"""
import numpy as np
from gensim.models.keyedvectors import KeyedVectors

from ..datasource import Datasource


class word2vec(Datasource):
    """
    Generates vectors for a list of items generated by another
    datasource.

    :Parameters:
        items_datasource : :class:`revscoring.Datasource`
            A datasource that returns a list of words.
        w2v_prefix : `string`
            prefix path where vectors are stores
        w2v : `string`
            name of word vector file to load
        returns : `func`
            A function that represents the type of value that will be
            contained in the vector.  When called without an argument, this
            function should return the default value (for missing) keys
            in the dict.
        dim : `int`
            The dimension of the vectors
        limit : `int`
            Max number of word vectors to load
        name : `str`
            A name for the `revscoring.FeatureVector`
    """

    def __init__(self, items_datasource, w2v_prefix="~/.word2vec/", w2v=None,
                 returns=np.float64, dim=300, limit=None, name=None):
        name = self._format_name(name, [items_datasource])
        self.prefix = w2v_prefix
        self.dim = dim
        self.limit = limit
        self.w2v = self.load_kv(w2v_prefix + w2v, limit)
        super().__init__(name, self.process, depends_on=[items_datasource])

    def process(self, d):
        return [self.w2v[w] if w in self.w2v else np.zeros(self.dim)
                for w in d]

    def load_kv(self, path, limit):
        return KeyedVectors.load_word2vec_format(path, binary=True,
                                                 limit=limit)
